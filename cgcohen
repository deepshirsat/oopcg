#include <graphics.h>
#include <iostream>
using namespace std;
const int INSIDE = 0; // 0000
const int LEFT = 1; // 0001
const int RIGHT = 2; // 0010
const int BOTTOM = 4; // 0100
const int TOP = 8; // 1000
int x_min, y_min, x_max, y_max;
// Function to compute region code for a point (x, y)
int computeCode(int x, int y) {
int code = INSIDE;
if (x < x_min) // to the left of rectangle
code |= LEFT;
else if (x > x_max) // to the right of rectangle
code |= RIGHT;
if (y < y_min) // below the rectangle
code |= BOTTOM;
else if (y > y_max) // above the rectangle
code |= TOP;
return code;
}
// Cohen-Sutherland clipping algorithm
void cohenSutherlandClip(int x1, int y1, int x2, int y2) {
int code1 = computeCode(x1, y1);
int code2 = computeCode(x2, y2);
bool accept = false;
while (true) {
if ((code1 == 0) && (code2 == 0)) {
accept = true;
break;
} else if (code1 & code2) {
break;
} else {
int code_out;
int x, y;
if (code1 != 0)
code_out = code1;
else
code_out = code2;
if (code_out & TOP) {
x = x1 + (x2 - x1) * (y_max - y1) / (y2 - y1);
y = y_max;
} else if (code_out & BOTTOM) {
x = x1 + (x2 - x1) * (y_min - y1) / (y2 - y1);
y = y_min;
} else if (code_out & RIGHT) {
y = y1 + (y2 - y1) * (x_max - x1) / (x2 - x1);
x = x_max;
} else if (code_out & LEFT) {
y = y1 + (y2 - y1) * (x_min - x1) / (x2 - x1);
x = x_min;
}
if (code_out == code1) {
x1 = x;
y1 = y;
code1 = computeCode(x1, y1);
} else {
x2 = x;
y2 = y;
code2 = computeCode(x2, y2);
}
}
}
if (accept) {
setcolor(RED);
line(x1, y1, x2, y2);
}
int main() {
int gd = X11, gm = X11_1024x768;
initgraph(&gd, &gm, (char*)"");
// Define the clipping window
x_min = 100, y_min = 100;
x_max = 500, y_max = 400;
// Draw clipping window
rectangle(x_min, y_min, x_max, y_max);
// Draw original line in white
setcolor(WHITE);
int x1 = 50, y1 = 150, x2 = 600, y2 = 350;
int x11 = 120, y12 = 120, x21 = 300, y22 = 250;
// Clip line and draw clipped portion in red
cohenSutherlandClip(x1, y1, x2, y2);
cohenSutherlandClip(x11,y12,x21,y22);
getch();
closegraph();
return 0;
}
